local wk = require("which-key")
require("which-key").setup({})
local mappings = {
	p = {
		name = "Plugin actions",
		i = { ":PlugInstall<CR>", "Install plugins" },
		c = { ":PlugClean<CR>", "Install plugins" },
		u = { ":PlugUpdate<CR>", "Update plugins" },
		U = { ":PlugUpgrade<CR>", "Upgrade Vim Plug" },
	},
	c = {
		name = "Config",
		e = { ":e ~/.config/nvim/init.vim<CR>", "Edit config file" },
		s = { ":source ~/.config/nvim/init.vim<CR>", "Source config file" },
	},
	t = {
		name = "Terminal actions",
		n = { ":FloatermNew! cd %:p:h ; clear<CR>", "New terminal in current directory" },
		N = { ":FloatermNew! cd %:p:h ; clear<CR>:FloatermToggle<CR>", "Initialize terminal" },
		t = { ":FloatermToggle<CR>", "Toggle terminal" },
		c = { ":FloatermKill<CR>", "Close current terminal" },
		w = { ":FloatermKill!<CR>", "Kill all terminals" },
		h = { ":FloatermPrev<CR>", "Move to previous terminal" },
		l = { ":FloatermNext<CR>", "Move to next terminal" },
	},
	r = {
		name = "Run in terminal",
		l = { ":FloatermNew! live-server %:p:h<CR>", "Run live-server" },
		j = { ':FloatermSend node "%:p"<CR>:FloatermToggle<CR>', "Run javascript file" },
		p = { ":FloatermSend python3 %:p<CR>:FloatermToggle<CR>", "Run python file" },
	},
	f = {
		name = "FZF actions",
		w = { ":Ag<CR>", "Search for words on cwd" },
		f = { ":FZF<CR>", "Search for files on cwd" },
		h = { ":History<CR>", "Search in recently opened files" },
		b = { ":Buffers<CR>", "Search in current opened buffers" },
		l = { ":BLines<CR>", "Search in current buffer lines" },
		c = { ":Colors<CR>", "Search in color schemes" },
	},
	e = {
		name = "File explorer",
		o = { ":Fern %:h -drawer<CR>", "Open file explorer" },
		t = { ":Fern %:h -drawer -toggle<CR>", "Toggle file explorer" },
		f = { ":FernDo :<CR>", "Focus file explorer from current file" },
	},
	b = {
		name = "Buffer actions",
		d = { ":bdelete <C-D>", "Delete a buffer from selection" },
		w = { ":call DeleteBuffers()<CR>", "Delete all not visible buffers" },
	},
	s = {
		name = "Session actions",
		l = { ":SessionLoad _<C-D>", "Load session" },
		s = { ":SessionSave _<C-D>", "Save session" },
	},
	g = {
		name = "Git actions",
		n = { '<cmd>lua require"gitsigns.actions".next_hunk()<CR>', "Next git hunk" },
		p = { '<cmd>lua require"gitsigns.actions".prev_hunk()<CR>', "Previous git hunk" },
		r = { '<cmd>lua require"gitsigns".reset_hunk()<CR>', "Reset git hunk" },
		R = { '<cmd>lua require"gitsigns".reset_buffer()<CR>', "Reset all changes in buffer" },
		w = { '<cmd>lua require"gitsigns".preview_hunk()<CR>', "Preview git changes" },
		o = { ":Neogit<CR>", "Open neogit" },
	},
	w = {
		name = "Vimwiki",
	},
	n = {
		name = "Lsp actions",
		i = { ":LspInfo<cr>", "Connected Language Servers" },
		K = { "<cmd>lua vim.lsp.buf.signature_help()<cr>", "Signature Help" },
		k = { "<cmd>Lspsaga hover_doc<cr>", "Hover Commands" },
		l = { "<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<cr>", "List Workspace Folders" },
		t = { "<cmd>lua vim.lsp.buf.type_definition()<cr>", "Type Definition" },
		d = { "<cmd>lua vim.lsp.buf.definition()<cr>", "Go To Definition" },
		D = { "<cmd>lua vim.lsp.buf.declaration()<cr>", "Go To Declaration" },
		r = { "<cmd>lua vim.lsp.buf.references()<cr>", "References" },
		R = { "<cmd>Lspsaga rename<cr>", "Rename" },
		a = { "<cmd>Lspsaga code_action<cr>", "Code Action" },
		e = { "<cmd>Lspsaga show_line_diagnostics<cr>", "Show Line Diagnostics" },
		n = { "<cmd>Lspsaga diagnostic_jump_next<cr>", "Go To Next Diagnostic" },
		N = { "<cmd>Lspsaga diagnostic_jump_prev<cr>", "Go To Previous Diagnostic" },
		p = { "<cmd>lua require'lspsaga.provider'.preview_definition()<CR>", "Definition preview popUp" },
		w = { "<cmd>lua require('lspsaga.action').smart_scroll_with_saga(1)<CR>", "Scroll LSP popUp up" },
		s = { "<cmd>lua require('lspsaga.action').smart_scroll_with_saga(-1)<CR>", "Scroll LSP popUp down" },
	},
	q = { ":q<CR>", "Quit" },
	h = { "<C-w>h", "Move to left split" },
	l = { "<C-w>l", "Move to right split" },
	j = { "<C-w>j", "Move to right split" },
	k = { "<C-w>k", "Move to right split" },
	y = { '"+y', "Yank into the clipboard" },
	v = { '"+p', "Copy from the clipboard" },
	a = { ":bprevious<CR>", "Move to left buffer" },
	d = { ":bnext<CR>", "Move to right buffer" },
}

local opts = { prefix = "<leader>" }
wk.register(mappings, opts)
